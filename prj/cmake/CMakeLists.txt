cmake_minimum_required(VERSION 3.7)
project(Synet)

option(SYNET_INFO "Print build information" ON)
option(SIMD "Use Simd Library" ON)
option(SIMD_AVX512 "Use AVX-512F and AVX512BW" OFF)
option(SIMD_AVX512VNNI "Use AVX-512VNNI" OFF)
option(BLIS "Use Blis" OFF)
option(PERF_STAT "Performance statistic level: 0 - no statistic, 1 - Synet layer statistic, 2 - Synet size statistic, , 3 - Simd subnet statistic, 4 - Simd internal statistic" OFF)
set(MAX_ERRORS 5)


if(NOT((MODE STREQUAL "all") OR (MODE STREQUAL "darknet") OR 
       (MODE STREQUAL "inference_engine") OR (MODE STREQUAL "onnx") OR 
       (MODE STREQUAL "performance_difference") OR (MODE STREQUAL "precision") OR 
       (MODE STREQUAL "quantization") OR (MODE STREQUAL "use_samples")))
    message(FATAL_ERROR "Unknown value of MODE: '${MODE}'!")
endif()

set(ROOT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../..)

if(CMAKE_BUILD_TYPE STREQUAL "")
    set(CMAKE_BUILD_TYPE "Release")
endif()

if(NOT TOOLCHAIN STREQUAL "")
    #set(CMAKE_C_COMPILER ${TOOLCHAIN})
    set(CMAKE_CXX_COMPILER ${TOOLCHAIN})
    execute_process(COMMAND ${CMAKE_CXX_COMPILER} -dumpversion OUTPUT_VARIABLE CMAKE_CXX_COMPILER_VERSION)
	string(REGEX REPLACE "\n$" "" CMAKE_CXX_COMPILER_VERSION "${CMAKE_CXX_COMPILER_VERSION}")
endif()

if(SYNET_INFO)
	message("Build type: ${CMAKE_BUILD_TYPE}")
	message("Toolchain: ${CMAKE_CXX_COMPILER}")
	message("ID: ${CMAKE_CXX_COMPILER_ID}")
	message("Version: ${CMAKE_CXX_COMPILER_VERSION}")
endif()

include_directories(${ROOT_DIR}/src)
include_directories(${ROOT_DIR}/3rd/stb)

if(CMAKE_BUILD_TYPE STREQUAL "Release")
    set(COMMON_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -O3 -std=c++11 -fmax-errors=${MAX_ERRORS}")
elseif(CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(COMMON_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -O0 -std=c++11 -fmax-errors=${MAX_ERRORS}")
else()
    message(FATAL_ERROR "Unknown value of CMAKE_BUILD_TYPE!")
endif()

if(PERF_STAT GREATER_EQUAL 1)
	add_definitions(-DSYNET_LAYER_STATISTIC)
endif()
if(PERF_STAT GREATER_EQUAL 2)
	add_definitions(-DSYNET_SIZE_STATISTIC)
endif()
if(PERF_STAT GREATER_EQUAL 3)
	add_definitions(-DSYNET_SUBNET_STATISTIC)
endif()

if(SIMD)
	set(SIMD_TEST OFF CACHE BOOL "" FORCE)
	set(SIMD_SHARED ON CACHE BOOL "" FORCE)
	set(SIMD_GET_VERSION OFF CACHE BOOL "" FORCE)
	set(SIMD_TOOLCHAIN ${CMAKE_CXX_COMPILER})
	set(SIMD_INFO ${SYNET_INFO} CACHE BOOL "" FORCE)
	set(SIMD_LIB "Simd")	
	if(PERF_STAT GREATER_EQUAL 4)
		set(SIMD_PERF ON CACHE BOOL "" FORCE)
	else()
		set(SIMD_PERF OFF CACHE BOOL "" FORCE)
	endif()
	set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
	add_definitions(-DSYNET_SIMD_LIBRARY_ENABLE)
	add_subdirectory(${ROOT_DIR}/3rd/Simd/prj/cmake 3rd/Simd)
	include_directories(${ROOT_DIR}/3rd/Simd/src)
else()
	set(SIMD_LIB "")
endif()

if(BLIS)
	set(BLIS_LIB ${CMAKE_BINARY_DIR}/blis/lib/libblis.a)
	set(BLIS_DEP make_blis)
	add_definitions(-DSYNET_BLIS_ENABLE)
	add_subdirectory(${ROOT_DIR}/3rd/blis 3rd/blis)
	include_directories(${CMAKE_BINARY_DIR}/blis/include)
else()
	set(BLIS_LIB "")
	set(BLIS_DEP "")
endif()

if((MODE STREQUAL "darknet") OR (MODE STREQUAL "all"))
	set(DARKNET_DIR ${ROOT_DIR}/3rd/darknet)
	include_directories(${DARKNET_DIR}/src)
	add_subdirectory(${DARKNET_DIR} 3rd/darknet)
	file(GLOB_RECURSE TEST_DARKNET_SRC ${ROOT_DIR}/src/Test/TestDarknet.cpp ${ROOT_DIR}/src/Test/TestImage.cpp)
	set_source_files_properties(${TEST_DARKNET_SRC} PROPERTIES COMPILE_FLAGS "${COMMON_CXX_FLAGS}")
	add_executable(test_darknet ${TEST_DARKNET_SRC})
	target_compile_definitions(test_darknet PUBLIC SYNET_TEST_STB_EXTERNAL)
	target_link_libraries(test_darknet darknet ${SIMD_LIB} ${BLIS_LIB} -ldl -lpthread)
	if(BLIS)
		add_dependencies(test_darknet ${BLIS_DEP})
	endif()
endif()

if((MODE STREQUAL "inference_engine") OR (MODE STREQUAL "all"))
	include(${ROOT_DIR}/prj/cmake/inference-engine.cmake)
	file(GLOB_RECURSE TEST_IE_SRC ${ROOT_DIR}/src/Test/TestInferenceEngine.cpp ${ROOT_DIR}/src/Test/TestImage.cpp)
	set_source_files_properties(${TEST_IE_SRC} PROPERTIES COMPILE_FLAGS "${COMMON_CXX_FLAGS}")
	add_executable(test_inference_engine ${TEST_IE_SRC})
	add_dependencies(test_inference_engine make_inference_engine)
	target_link_libraries(test_inference_engine ${IE_BIN_LIBS} ${SIMD_LIB} ${BLIS_LIB} -ldl -lpthread)
	if(BLIS)
		add_dependencies(test_inference_engine ${BLIS_DEP})
	endif()
endif()

if((MODE STREQUAL "onnx") OR (MODE STREQUAL "all"))
	if (MODE STREQUAL "onnx")
		include(${ROOT_DIR}/prj/cmake/inference-engine.cmake)
	endif()
	include_directories(${ROOT_DIR}/3rd/openvino/ngraph/core/include)
	include_directories(${ROOT_DIR}/3rd/openvino/ngraph/frontend/onnx_import/include)
	file(GLOB_RECURSE TEST_ONNX_SRC ${ROOT_DIR}/src/Test/TestOnnx.cpp ${ROOT_DIR}/src/Test/TestImage.cpp)
	set_source_files_properties(${TEST_ONNX_SRC} PROPERTIES COMPILE_FLAGS "${COMMON_CXX_FLAGS}")
	add_executable(test_onnx ${TEST_ONNX_SRC})
	add_dependencies(test_onnx make_inference_engine)
	target_link_libraries(test_onnx ${IE_BIN_LIBS} ${SIMD_LIB} ${BLIS_LIB} -ldl -lpthread)
	if(BLIS)
		add_dependencies(test_onnx ${BLIS_DEP})
	endif()
endif()

if((MODE STREQUAL "performance_difference") OR (MODE STREQUAL "all"))	
	file(GLOB_RECURSE PERF_DIFF_SRC ${ROOT_DIR}/src/Test/TestPerformanceDifference.cpp ${ROOT_DIR}/src/Test/TestImage.cpp)
	set_source_files_properties(${PERF_DIFF_SRC} PROPERTIES COMPILE_FLAGS "${COMMON_CXX_FLAGS}")
	add_executable(test_performance_difference ${PERF_DIFF_SRC})
	target_link_libraries(test_performance_difference ${SIMD_LIB} -ldl -lpthread)
endif()

if((MODE STREQUAL "precision") OR (MODE STREQUAL "all"))	
	if (MODE STREQUAL "precision")
		include(${ROOT_DIR}/prj/cmake/inference-engine.cmake)
	endif()
	file(GLOB_RECURSE PRECISION_SRC ${ROOT_DIR}/src/Test/TestPrecision.cpp ${ROOT_DIR}/src/Test/TestImage.cpp)
	set_source_files_properties(${PRECISION_SRC} PROPERTIES COMPILE_FLAGS "${COMMON_CXX_FLAGS}")
	add_executable(test_precision ${PRECISION_SRC})
	add_dependencies(test_precision make_inference_engine)
	target_link_libraries(test_precision ${IE_BIN_LIBS} ${SIMD_LIB} -ldl -lpthread)
	if(BLIS)
		add_dependencies(test_precision ${BLIS_DEP})
	endif()
endif()

if((MODE STREQUAL "quantization") OR (MODE STREQUAL "all"))	
	file(GLOB_RECURSE QUANTIZATION_SRC ${ROOT_DIR}/src/Test/TestQuantization.cpp ${ROOT_DIR}/src/Test/TestImage.cpp)
	set_source_files_properties(${QUANTIZATION_SRC} PROPERTIES COMPILE_FLAGS "${COMMON_CXX_FLAGS}")
	add_executable(test_quantization ${QUANTIZATION_SRC})
	target_link_libraries(test_quantization ${SIMD_LIB} -ldl -lpthread)
endif()
	
if((MODE STREQUAL "use_samples") OR (MODE STREQUAL "all"))
	file(GLOB USE_FD_SRC ${ROOT_DIR}/src/Use/UseFaceDetection.cpp)
	set_source_files_properties(${USE_FD_SRC} PROPERTIES COMPILE_FLAGS "${COMMON_CXX_FLAGS}")
	add_executable(use_face_detection ${USE_FD_SRC})
	target_link_libraries(use_face_detection ${SIMD_LIB} ${BLIS_LIB} -ldl -lpthread)
	if(BLIS)
		add_dependencies(use_face_detection ${BLIS_DEP})
	endif()
	file(GLOB USE_FD_DATA  ${ROOT_DIR}/data/use_samples/face_detection/*.*)
	file(COPY ${USE_FD_DATA} DESTINATION ${CMAKE_BINARY_DIR})
endif()
